<?php

namespace PeopleBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * Returns all examens
     */
    public function findAll()
    {
        $sql = "SELECT * " .
            "FROM c3csi_user";

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('PeopleBundle\Entity\User', 'u');
        $rsm->addFieldResult('u', 'id', 'id');
        $rsm->addFieldResult('u', 'firstname', 'firstname');
        $rsm->addFieldResult('u', 'lastname', 'lastname');

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $matieres = $query->getResult();

        return $matieres;
    }

    /**
     * @param $id
     */
    public function findOneById($id, $fullObject = true)
    {
        $query = $this->createQueryBuilder('user');
        $query->where('user.id = :userID')
            ->setParameter('userID', $id);

        if ($fullObject) {
            //?
        }
        $result = $query->getQuery()->getResult();
        if (isset($result[0])) {
            return $result[0];
        }
        return $query->getQuery()->getResult();
    }

    /**
     * @param $userList
     * @param $competenceList
     */
    public function findByListWithEvaluations($userList, $competenceList)
    {

        $sql =  "SELECT u.id as user_id, CONCAT(u.firstname, ' ', u.lastname) AS user_name, u.discr,
                c.id AS competence_id, c.name AS competence_name,
                CONCAT( COALESCE(tn.value,''), '- ', COALESCE(tn.label,'') ) as type_note_label  " .
                "FROM c3csi_user u ".
                "CROSS JOIN c3csi_competence c ON c.id IN (?) ".
                "LEFT JOIN c3csi_evaluation ev ON ev.user_id = u.id AND ev.competence_id = c.id AND ev.evaluated_at = ( ".
                    "SELECT MAX(evaluated_at) ".
                    "FROM c3csi_evaluation ev2 ".
	                "WHERE ev2.user_id = u.id AND ev2.competence_id = c.id ".
	                "GROUP BY user_id, competence_id ".
                ") ".
                "LEFT JOIN c3csi_type_note tn ON tn.id = ev.note_id ".
                "WHERE u.id IN (?) ".
                "ORDER BY u.id ";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult("user_id", "user_id");
        $rsm->addScalarResult("user_name", "user_name");
        $rsm->addScalarResult("competence_id", "competence_id");
        $rsm->addScalarResult("competence_name", "competence_name");
        $rsm->addScalarResult("type_note_label", "type_note_label");

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $competenceList);
        $query->setParameter(2, $userList);
        $result = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        return $result;
    }

    /**
     * Returns the examens related to the group passed in parameter
     *
     * @param $groupID
     */
    public function findByGroupId($groupID)
    {
        $sql = "SELECT user.id, user.firstname, user.lastname " .
            "FROM c3csi_group grp " .
            "LEFT JOIN c3csi_group_rel_user grp_rel_us ON grp_rel_us.group_id = grp.id " .
            "LEFT JOIN c3csi_user user ON user.id = grp_rel_us.user_id " .
            "WHERE grp.id = ?";

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('PeopleBundle\Entity\User', 'u');
        $rsm->addFieldResult('u', 'id', 'id');
        $rsm->addFieldResult('u', 'firstname', 'firstname');
        $rsm->addFieldResult('u', 'lastname', 'lastname');

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $groupID);
        $result = $query->getResult();

        return $result;
    }

}
